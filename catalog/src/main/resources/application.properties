# ===================================
# Catalog Service - Specific Configuration
# ===================================
# Shared properties are inherited from shared-config module
# Only service-specific overrides and unique properties are defined here

# HTTP Configuration - Service-specific port
quarkus.http.port=8081

# Database Configuration - Catalog PostgreSQL
# When running locally with ./gradlew quarkusDev, use localhost
# When running in Docker, use the container name
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/catalog

# Application name
quarkus.application.name=catalog-service

# OpenTelemetry - Service-specific name
quarkus.otel.service.name=catalog-service

# Hibernate Second-Level Cache - Entity-specific configuration
quarkus.hibernate-orm.cache."com.akfc.catalog.data.Resource".expiration.max-idle=10M
quarkus.hibernate-orm.cache."com.akfc.catalog.data.Resource".memory.object-count=1000

# Google Books API Configuration
quarkus.rest-client."google-books-api".url=https://www.googleapis.com/books/v1
quarkus.rest-client."google-books-api".scope=jakarta.inject.Singleton

# Google Books Sync Configuration
googlebooks.sync.enabled=true
googlebooks.sync.authors=Jules Verne,Victor Hugo,Ali Koudri
googlebooks.sync.max-results-per-author=40

# RabbitMQ Outgoing Channel - Resource Events (Publish)
mp.messaging.outgoing.resource-events.connector=smallrye-rabbitmq
mp.messaging.outgoing.resource-events.exchange.name=library.resources
mp.messaging.outgoing.resource-events.exchange.type=topic
mp.messaging.outgoing.resource-events.exchange.durable=true
mp.messaging.outgoing.resource-events.routing-keys=resource.created,resource.updated,resource.deleted

# RabbitMQ Incoming Channel - Review Events (Subscribe)
mp.messaging.incoming.review-events.connector=smallrye-rabbitmq
mp.messaging.incoming.review-events.queue.name=catalog.reviews
mp.messaging.incoming.review-events.queue.durable=true
mp.messaging.incoming.review-events.exchange.name=library.reviews
mp.messaging.incoming.review-events.routing-keys=review.created,review.updated

# REST Client Configuration for service-to-service communication
# URLs will be resolved dynamically via Consul service discovery
quarkus.rest-client.reviews-service.url=http://localhost:8083
quarkus.rest-client.reviews-service.scope=jakarta.inject.Singleton
quarkus.rest-client.reviews-service.connect-timeout=5000
quarkus.rest-client.reviews-service.read-timeout=10000

quarkus.rest-client.users-service.url=http://localhost:8082
quarkus.rest-client.users-service.scope=jakarta.inject.Singleton
quarkus.rest-client.users-service.connect-timeout=5000
quarkus.rest-client.users-service.read-timeout=10000
