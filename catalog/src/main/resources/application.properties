# HTTP Configuration
quarkus.http.port=8081
quarkus.http.host=0.0.0.0

# Database Configuration - Catalog PostgreSQL
# When running locally with ./gradlew quarkusDev, use localhost
# When running in Docker, use the container name
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=training
quarkus.datasource.password=training
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/catalog

# Hibernate Configuration
# drop-and-create: Drops the schema and recreates it on every startup
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.sql-load-script=no-file

# Application name
quarkus.application.name=catalog-service

# Consul Configuration
consul.host=localhost
consul.port=8500
consul.registration.enabled=true

# Redis Configuration
# When running locally with ./gradlew quarkusDev, use localhost
# When running in Docker, use the container name
quarkus.redis.hosts=redis://localhost:6379

# Cache Configuration
quarkus.cache.type=redis

# Hibernate Second-Level Cache
quarkus.hibernate-orm.cache."com.akfc.catalog.data.Resource".expiration.max-idle=10M
quarkus.hibernate-orm.cache."com.akfc.catalog.data.Resource".memory.object-count=1000

# Google Books API Configuration
quarkus.rest-client."google-books-api".url=https://www.googleapis.com/books/v1
quarkus.rest-client."google-books-api".scope=jakarta.inject.Singleton

# Google Books Sync Configuration
googlebooks.sync.enabled=true
googlebooks.sync.authors=Jules Verne,Victor Hugo,Ali Koudri
googlebooks.sync.max-results-per-author=40

# RabbitMQ Configuration
# When running locally with ./gradlew quarkusDev, use localhost
# When running in Docker, use the container name
rabbitmq-host=localhost
rabbitmq-port=5672
rabbitmq-username=admin
rabbitmq-password=admin

# Disable messaging health checks until publishers/consumers are implemented
mp.messaging.health.enabled=false

# RabbitMQ Outgoing Channel - Resource Events (Publish)
mp.messaging.outgoing.resource-events.connector=smallrye-rabbitmq
mp.messaging.outgoing.resource-events.exchange.name=library.resources
mp.messaging.outgoing.resource-events.exchange.type=topic
mp.messaging.outgoing.resource-events.exchange.durable=true
mp.messaging.outgoing.resource-events.routing-keys=resource.created,resource.updated,resource.deleted

# RabbitMQ Incoming Channel - Review Events (Subscribe)
mp.messaging.incoming.review-events.connector=smallrye-rabbitmq
mp.messaging.incoming.review-events.queue.name=catalog.reviews
mp.messaging.incoming.review-events.queue.durable=true
mp.messaging.incoming.review-events.exchange.name=library.reviews
mp.messaging.incoming.review-events.routing-keys=review.created,review.updated

# REST Client Configuration for service-to-service communication
# URLs will be resolved dynamically via Consul service discovery
quarkus.rest-client.reviews-service.url=http://localhost:8083
quarkus.rest-client.reviews-service.scope=jakarta.inject.Singleton
quarkus.rest-client.reviews-service.connect-timeout=5000
quarkus.rest-client.reviews-service.read-timeout=10000

quarkus.rest-client.users-service.url=http://localhost:8082
quarkus.rest-client.users-service.scope=jakarta.inject.Singleton
quarkus.rest-client.users-service.connect-timeout=5000
quarkus.rest-client.users-service.read-timeout=10000

# ===================================
# Observability Configuration
# ===================================

# OpenTelemetry - Distributed Tracing
quarkus.otel.enabled=true
quarkus.otel.service.name=catalog-service
quarkus.otel.exporter.otlp.endpoint=http://localhost:4317
quarkus.otel.exporter.otlp.protocol=grpc
quarkus.otel.traces.enabled=true
quarkus.otel.metrics.enabled=true
quarkus.otel.logs.enabled=false

# Trace sampling (1.0 = 100% of traces)
quarkus.otel.traces.sampler=always_on

# Resource attributes
quarkus.otel.resource.attributes=environment=development,version=1.0.0-SNAPSHOT,tier=backend

# Instrument specific libraries
quarkus.otel.instrument.rest=true
quarkus.otel.instrument.messaging=true
quarkus.otel.instrument.grpc=false
quarkus.otel.instrument.jdbc=true

# Propagate trace context
quarkus.otel.propagators=tracecontext,baggage

# Micrometer Prometheus Metrics
quarkus.micrometer.enabled=true
quarkus.micrometer.registry-enabled-default=true
quarkus.micrometer.binder-enabled-default=true
quarkus.micrometer.export.prometheus.enabled=true
quarkus.micrometer.export.prometheus.path=/q/metrics

# Enable specific metric binders
quarkus.micrometer.binder.http-server.enabled=true
quarkus.micrometer.binder.http-client.enabled=true
quarkus.micrometer.binder.jvm.enabled=true
quarkus.micrometer.binder.system.enabled=true
quarkus.micrometer.binder.mp-metrics.enabled=true

# Logging
quarkus.log.console.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p traceId=%X{traceId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{3.}] (%t) %s%e%n
