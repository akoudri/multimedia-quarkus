# ===================================
# Users Service - Specific Configuration
# ===================================
# Shared properties are inherited from shared-config module
# Only service-specific overrides and unique properties are defined here

# HTTP Configuration - Service-specific port
quarkus.http.port=8082

# Database Configuration - Users PostgreSQL
# When running locally with ./gradlew quarkusDev, use localhost
# When running in Docker, use the container name
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:7654/users

# Application name
quarkus.application.name=users-service

# OpenTelemetry - Service-specific name
quarkus.otel.service.name=users-service

# Hibernate Second-Level Cache - Entity-specific configuration
quarkus.hibernate-orm.cache."com.akfc.users.data.User".expiration.max-idle=10M
quarkus.hibernate-orm.cache."com.akfc.users.data.User".memory.object-count=1000

# RabbitMQ Outgoing Channel - User Events (Publish)
mp.messaging.outgoing.user-events.connector=smallrye-rabbitmq
mp.messaging.outgoing.user-events.exchange.name=library.users
mp.messaging.outgoing.user-events.exchange.type=topic
mp.messaging.outgoing.user-events.exchange.durable=true
mp.messaging.outgoing.user-events.routing-keys=user.created,user.updated,user.suspended,user.deleted

# RabbitMQ Incoming Channel - Resource Events (Subscribe)
mp.messaging.incoming.resource-events.connector=smallrye-rabbitmq
mp.messaging.incoming.resource-events.queue.name=users.resources
mp.messaging.incoming.resource-events.queue.durable=true
mp.messaging.incoming.resource-events.exchange.name=library.resources
mp.messaging.incoming.resource-events.routing-keys=resource.created,resource.updated

# Custom application properties
greeting.message=Hello
greeting.name=Quarkus
